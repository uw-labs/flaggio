// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uw-labs/flaggio/internal/repository (interfaces: Flag)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	flaggio "github.com/uw-labs/flaggio/internal/flaggio"
)

// MockFlag is a mock of Flag interface
type MockFlag struct {
	ctrl     *gomock.Controller
	recorder *MockFlagMockRecorder
}

// MockFlagMockRecorder is the mock recorder for MockFlag
type MockFlagMockRecorder struct {
	mock *MockFlag
}

// NewMockFlag creates a new mock instance
func NewMockFlag(ctrl *gomock.Controller) *MockFlag {
	mock := &MockFlag{ctrl: ctrl}
	mock.recorder = &MockFlagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlag) EXPECT() *MockFlagMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFlag) Create(arg0 context.Context, arg1 flaggio.NewFlag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFlagMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlag)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockFlag) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFlagMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlag)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method
func (m *MockFlag) FindAll(arg0 context.Context, arg1 *string, arg2, arg3 *int64) (*flaggio.FlagResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*flaggio.FlagResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockFlagMockRecorder) FindAll(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFlag)(nil).FindAll), arg0, arg1, arg2, arg3)
}

// FindByID mocks base method
func (m *MockFlag) FindByID(arg0 context.Context, arg1 string) (*flaggio.Flag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*flaggio.Flag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockFlagMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFlag)(nil).FindByID), arg0, arg1)
}

// FindByKey mocks base method
func (m *MockFlag) FindByKey(arg0 context.Context, arg1 string) (*flaggio.Flag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", arg0, arg1)
	ret0, _ := ret[0].(*flaggio.Flag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey
func (mr *MockFlagMockRecorder) FindByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockFlag)(nil).FindByKey), arg0, arg1)
}

// Update mocks base method
func (m *MockFlag) Update(arg0 context.Context, arg1 string, arg2 flaggio.UpdateFlag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockFlagMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlag)(nil).Update), arg0, arg1, arg2)
}
