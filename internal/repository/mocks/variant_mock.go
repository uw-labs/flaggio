// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uw-labs/flaggio/internal/repository (interfaces: Variant)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	flaggio "github.com/uw-labs/flaggio/internal/flaggio"
)

// MockVariant is a mock of Variant interface
type MockVariant struct {
	ctrl     *gomock.Controller
	recorder *MockVariantMockRecorder
}

// MockVariantMockRecorder is the mock recorder for MockVariant
type MockVariantMockRecorder struct {
	mock *MockVariant
}

// NewMockVariant creates a new mock instance
func NewMockVariant(ctrl *gomock.Controller) *MockVariant {
	mock := &MockVariant{ctrl: ctrl}
	mock.recorder = &MockVariantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVariant) EXPECT() *MockVariantMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockVariant) Create(arg0 context.Context, arg1 string, arg2 flaggio.NewVariant) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockVariantMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVariant)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockVariant) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVariantMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVariant)(nil).Delete), arg0, arg1, arg2)
}

// FindByID mocks base method
func (m *MockVariant) FindByID(arg0 context.Context, arg1, arg2 string) (*flaggio.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*flaggio.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockVariantMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockVariant)(nil).FindByID), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockVariant) Update(arg0 context.Context, arg1, arg2 string, arg3 flaggio.UpdateVariant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockVariantMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVariant)(nil).Update), arg0, arg1, arg2, arg3)
}
