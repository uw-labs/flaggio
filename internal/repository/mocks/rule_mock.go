// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uw-labs/flaggio/internal/repository (interfaces: Rule)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	flaggio "github.com/uw-labs/flaggio/internal/flaggio"
	reflect "reflect"
)

// MockRule is a mock of Rule interface
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// CreateFlagRule mocks base method
func (m *MockRule) CreateFlagRule(arg0 context.Context, arg1 string, arg2 flaggio.NewFlagRule) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlagRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlagRule indicates an expected call of CreateFlagRule
func (mr *MockRuleMockRecorder) CreateFlagRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlagRule", reflect.TypeOf((*MockRule)(nil).CreateFlagRule), arg0, arg1, arg2)
}

// CreateSegmentRule mocks base method
func (m *MockRule) CreateSegmentRule(arg0 context.Context, arg1 string, arg2 flaggio.NewSegmentRule) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegmentRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegmentRule indicates an expected call of CreateSegmentRule
func (mr *MockRuleMockRecorder) CreateSegmentRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegmentRule", reflect.TypeOf((*MockRule)(nil).CreateSegmentRule), arg0, arg1, arg2)
}

// DeleteFlagRule mocks base method
func (m *MockRule) DeleteFlagRule(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlagRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlagRule indicates an expected call of DeleteFlagRule
func (mr *MockRuleMockRecorder) DeleteFlagRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlagRule", reflect.TypeOf((*MockRule)(nil).DeleteFlagRule), arg0, arg1, arg2)
}

// DeleteSegmentRule mocks base method
func (m *MockRule) DeleteSegmentRule(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentRule indicates an expected call of DeleteSegmentRule
func (mr *MockRuleMockRecorder) DeleteSegmentRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentRule", reflect.TypeOf((*MockRule)(nil).DeleteSegmentRule), arg0, arg1, arg2)
}

// FindFlagRuleByID mocks base method
func (m *MockRule) FindFlagRuleByID(arg0 context.Context, arg1, arg2 string) (*flaggio.FlagRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlagRuleByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*flaggio.FlagRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlagRuleByID indicates an expected call of FindFlagRuleByID
func (mr *MockRuleMockRecorder) FindFlagRuleByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlagRuleByID", reflect.TypeOf((*MockRule)(nil).FindFlagRuleByID), arg0, arg1, arg2)
}

// FindSegmentRuleByID mocks base method
func (m *MockRule) FindSegmentRuleByID(arg0 context.Context, arg1, arg2 string) (*flaggio.SegmentRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentRuleByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*flaggio.SegmentRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentRuleByID indicates an expected call of FindSegmentRuleByID
func (mr *MockRuleMockRecorder) FindSegmentRuleByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentRuleByID", reflect.TypeOf((*MockRule)(nil).FindSegmentRuleByID), arg0, arg1, arg2)
}

// UpdateFlagRule mocks base method
func (m *MockRule) UpdateFlagRule(arg0 context.Context, arg1, arg2 string, arg3 flaggio.UpdateFlagRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagRule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFlagRule indicates an expected call of UpdateFlagRule
func (mr *MockRuleMockRecorder) UpdateFlagRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagRule", reflect.TypeOf((*MockRule)(nil).UpdateFlagRule), arg0, arg1, arg2, arg3)
}

// UpdateSegmentRule mocks base method
func (m *MockRule) UpdateSegmentRule(arg0 context.Context, arg1, arg2 string, arg3 flaggio.UpdateSegmentRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegmentRule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegmentRule indicates an expected call of UpdateSegmentRule
func (mr *MockRuleMockRecorder) UpdateSegmentRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegmentRule", reflect.TypeOf((*MockRule)(nil).UpdateSegmentRule), arg0, arg1, arg2, arg3)
}
